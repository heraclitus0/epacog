import sys, os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from core.epistemic_state import EpistemicState
from core.realign_fn import realign_tanh
from rupture.volatility import theta_saturating
from rupture.rupture_policy import build_rupture_policy
from rupture.collapse_models import collapse_soft_decay
from sim.rupture_sim import (
    generate_signal_sequence,
    simulate_epistemic_drift,
    log_simulation_trace
)
from sim.projection_drift_map import (
    build_drift_field_matrix,
    plot_drift_map,
    plot_rupture_overlay,
    symbolize_drift_regions,
    describe_field_topology
)

def main():
    print("\nüîÅ Initializing Epistemic Agent...\n")

    rupture_policy = build_rupture_policy(strategy="threshold", theta_fn=theta_saturating)

    state = EpistemicState(
        V=0.0,
        E=0.0,
        delta_fn=lambda R, V: abs(R - V),
        threshold_fn=theta_saturating,
        realign_fn=realign_tanh,
        rupture_policy=rupture_policy,
    )

    print("üåê Generating signal sequence...\n")

    signal = generate_signal_sequence(
        mode="shock",
        steps=100,
        shock_at=45,
        shock_magnitude=2.5,
        noise=0.03
    )

    print("üß† Running recursive simulation...\n")

    trace = simulate_epistemic_drift(
        initial_state=state,
        signal_sequence=signal,
        steps=100,
        collapse_fn=collapse_soft_decay,
        print_trace=True
    )

    print("\nüìä Logging and visualizing...\n")

    df = log_simulation_trace(trace)
    field = build_drift_field_matrix(trace)
    plot_drift_map(field)
    plot_rupture_overlay(field)

    print("\nüß† Symbolic Topology Analysis:\n")

    zones = symbolize_drift_regions(field)
    summary = describe_field_topology(field, zones=zones)

    for k, v in summary.items():
        print(f"- {k}: {v}")

if __name__ == "__main__":
    main()
